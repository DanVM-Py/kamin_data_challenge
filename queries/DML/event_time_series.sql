WITH DAILY_EVENTS AS (
  SELECT 
    -- Transactional Data
    DATE(CAST(E.CREATED_AT AS TIMESTAMP)) AS TRANSACTION_DATE,
    EXTRACT(HOUR FROM CAST(E.CREATED_AT AS TIMESTAMP)) AS TRANSACTION_HOUR,
    
    -- AVG Delay
    AVG(
        CASE 
            WHEN E.COMPLETED_AT IS NOT NULL AND E.CREATED_AT IS NOT NULL 
            THEN EXTRACT(EPOCH FROM (CAST(E.COMPLETED_AT AS TIMESTAMP) - CAST(E.CREATED_AT AS TIMESTAMP))) / 3600.0
            ELSE NULL 
        END
    ) AS AVG_DELAY_HOURS,
    
    -- Split by type
    COUNT(E.EVENT_ID) AS TOTAL_EVENTS,
    SUM(E.AMOUNT) AS TOTAL_VOLUME,

    -- Qty Events by type
    SUM(
        CASE WHEN E.TYPE = 'pay_in' THEN 1 ELSE 0 END
    ) AS PAY_IN_COUNT,
    SUM(
        CASE WHEN E.TYPE = 'pay_out' THEN 1 ELSE 0 END
    ) AS PAY_OUT_COUNT,
    
    -- Volume by type
    SUM(
        CASE WHEN E.TYPE = 'pay_in' THEN E.AMOUNT ELSE 0 END
    ) AS PAY_IN_VOLUME,
    SUM(
        CASE WHEN E.TYPE = 'pay_out' THEN E.AMOUNT ELSE 0 END
    ) AS PAY_OUT_VOLUME,
    
    -- Failure rate by status
    SUM(
        CASE WHEN E.STATUS = 'failed' THEN 1 ELSE 0 END
    ) AS FAILED_COUNT,
    SUM(
        CASE WHEN E.STATUS = 'completed' THEN 1 ELSE 0 END
    ) AS COMPLETED_COUNT,
    SUM(
        CASE WHEN E.STATUS = 'processing' THEN 1 ELSE 0 END
    ) AS PROCESSING_COUNT
    
  FROM EVENTS AS E
  GROUP BY 1,2
)
, EVENTS_WITH_RETRIES_BY_HOUR AS (
  -- CTE separada para eventos que tuvieron retries (sin duplicar volumen)
  SELECT 
    DATE(CAST(E.CREATED_AT AS TIMESTAMP)) AS TRANSACTION_DATE,
    EXTRACT(HOUR FROM CAST(E.CREATED_AT AS TIMESTAMP)) AS TRANSACTION_HOUR,
    COUNT(DISTINCT E.EVENT_ID) AS EVENTS_WITH_RETRIES
  FROM EVENTS AS E
  INNER JOIN RETRY_LOGS AS R 
    ON E.EVENT_ID = R.ORIGINAL_EVENT_ID
  GROUP BY 1,2
)
, RETRY_LOGS_BY_HOUR AS (
  SELECT 
    DATE(CAST(R.RETRY_TIME AS TIMESTAMP)) AS RETRY_DATE,
    EXTRACT(HOUR FROM CAST(R.RETRY_TIME AS TIMESTAMP)) AS RETRY_HOUR,
    COUNT(1) AS TOTAL_RETRIES,
    SUM(
        CASE WHEN R.RETRY_STATUS = 'success' THEN 1 ELSE 0 END
    ) AS SUCCESSFUL_RETRIES
  FROM RETRY_LOGS AS R
  GROUP BY 1,2
)
SELECT 
  DE.TRANSACTION_DATE,
  DE.TRANSACTION_HOUR,
  
  -- Timestamp combinado para PowerBI
  DE.TRANSACTION_DATE + INTERVAL '1 hour' * DE.TRANSACTION_HOUR AS TIMESTAMP,
  
  -- Vol√∫menes
  DE.TOTAL_EVENTS,
  DE.TOTAL_VOLUME,
  DE.PAY_IN_VOLUME,
  DE.PAY_OUT_VOLUME,
  DE.PAY_IN_COUNT,
  DE.PAY_OUT_COUNT,
  
  -- Tasas calculadas
  ROUND(DE.FAILED_COUNT * 100.0 / NULLIF(DE.TOTAL_EVENTS, 0), 2) AS FAILURE_RATE,
  ROUND(DE.PAY_IN_COUNT * 100.0 / NULLIF(DE.TOTAL_EVENTS, 0), 2) AS PAY_IN_RATIO,
  
  -- Status counts
  DE.COMPLETED_COUNT,
  DE.FAILED_COUNT,
  DE.PROCESSING_COUNT,
  
  -- Retry metrics
  COALESCE(ER.EVENTS_WITH_RETRIES, 0) AS EVENTS_WITH_RETRIES,
  COALESCE(DR.TOTAL_RETRIES, 0) AS TOTAL_RETRIES,
  COALESCE(DR.SUCCESSFUL_RETRIES, 0) AS SUCCESSFUL_RETRIES,
  
  -- Retry rate
  ROUND(COALESCE(ER.EVENTS_WITH_RETRIES, 0) * 100.0 / NULLIF(DE.TOTAL_EVENTS, 0), 2) AS RETRY_RATE

FROM DAILY_EVENTS AS DE
LEFT JOIN EVENTS_WITH_RETRIES_BY_HOUR AS ER
  ON DE.TRANSACTION_DATE = ER.TRANSACTION_DATE 
  AND DE.TRANSACTION_HOUR = ER.TRANSACTION_HOUR
LEFT JOIN RETRY_LOGS_BY_HOUR AS DR
  ON DE.TRANSACTION_DATE = DR.RETRY_DATE 
  AND DE.TRANSACTION_HOUR = DR.RETRY_HOUR
ORDER BY DE.TRANSACTION_DATE, DE.TRANSACTION_HOUR